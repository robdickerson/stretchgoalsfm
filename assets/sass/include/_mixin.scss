@mixin vertical-align($amount, $position: relative) {
	position: $position;
	top: $amount;
	-webkit-transform: translateY(-$amount);
	-ms-transform: translateY(-$amount);
	transform: translateY(-$amount);
}

// Button sizes
@mixin btn-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $width, $height) {
	padding: $padding-vertical $padding-horizontal;
	font-size: $font-size;
	line-height: $line-height;
	width: $width;
	height: $height;
}

/// Creates a menu icon with a set width, height, number of bars, and colors. The mixin uses the height of the icon and the weight of the bars to determine spacing. <div class="docs-example-burger"></div>
///
/// @param {Color} $color - Color to use for the icon.
/// @param {Color} $color-hover - Color to use when the icon is hovered over.
/// @param {Number} $width - Width of the icon.
/// @param {Number} $height - Height of the icon.
/// @param {Number} $weight - Height of individual bars in the icon.
/// @param {Number} $bars - Number of bars in the icon.
@mixin hamburger($color: black, $color-hover: #666, $width: 96px, $height: 96px) {
	display: block;
	position: relative;
	overflow: hidden;
	margin: 0;
	padding: 0;
	width: 30px;
	height: 30px;
	font-size: 0;
	text-indent: -9999px;
	appearance: none;
	box-shadow: none;
	border-radius: none;
	border: none;
	cursor: pointer;
	transition: background 0.3s;
	
	&:focus {
		outline: none;
	}
	
	span {
		display: block;
		position: absolute;
		top: 15px;
		left: 0;
		right: 0;
		height: 2px;
		background: white;
		
		&:before,
		&:after {
			position: absolute;
			display: block;
			left: 0;
			width: 100%;
			height: 2px;
			background-color: #fff;
			content: "";
		}
		
		&:before {
			top: -10px;
		}
		
		&:after {
			bottom: -10px;
		}
	}
	
	&.hamburger--htx {
		background-color: transparent;
		
		span {
			transition: background 0s 0.3s;
			
			&:before,
			&:after {
				transition-duration: 0.3s, 0.3s;
				transition-delay: 0.3s, 0s;
			}
			
			&:before {
				transition-property: top, transform;
			}
			
			&:after {
				transition-property: bottom, transform;
			}
		}
		
		&.is-active {
			background-color: transparent;
			
			span {
				background: none;
				
				&:before {
					top: 0;
					transform: rotate(45deg);
				}
				
				&:after {
					bottom: 0;
					transform: rotate(-45deg);
				}
				
				&:after,
				&:before {
					transition-delay: 0s, 0.3s;
				}
			}
		}
	}
}


/// Removes the focus ring around an element when a mouse input is detected.
@mixin disable-mouse-outline {
  [data-whatinput='mouse'] & {
    outline: 0;
  }
}

/// Makes an element visually hidden, but still accessible to keyboards and assistive devices.
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility Hiding Content for Accessibility
@mixin element-invisible {
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
}

/// Reverses the CSS output created by the `element-invisible()` mixin.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}

/// Vertically centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/// Horizontally centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/// Absolutely centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Remove in 6.1.
// Vertically centers an element using `transform`.
@mixin v-align-middle {
  @include vertical-center;
}